generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["views"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  NOT_DEFINED
}

model Category {
  id          Int       @id @default(autoincrement())
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  createdById Int
  updatedById Int
  deletedById Int?
  name        String // @unique()
  description String?
  createdBy   User      @relation(name: "category_createdBy_user", map: "category_createdBy_user_fk", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  updatedBy   User      @relation(name: "category_updatedBy_user", map: "category_updatedBy_user_fk", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  deletedBy   User?     @relation(name: "category_deletedBy_user", map: "category_deletedBy_user_fk", fields: [deletedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  products    Product[] @relation()

  @@map("category")
}

model CashFlow {
  id            Int               @id @default(autoincrement())
  isActive      Boolean           @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @default(now()) @updatedAt
  deletedAt     DateTime?
  createdById   Int
  updatedById   Int
  deletedById   Int?
  expenseId     Int?              @unique // to link to a manually created expense.
  procurementId Int?              @unique // to link to a procurement.
  saleId        Int?              @unique // to link an income to a sale. 
  name          String
  operation     CashFlowOperation
  amount        Float
  createdBy     User              @relation(name: "cashFlow_createdBy_user", map: "cashFlow_createdBy_user_fk", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  updatedBy     User              @relation(name: "cashFlow_updatedBy_user", map: "cashFlow_updatedBy_user_fk", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  deletedBy     User?             @relation(name: "cashFlow_deletedBy_user", map: "cashFlow_deletedBy_user_fk", fields: [deletedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  expense       Expense?          @relation(fields: [expenseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  procurement   Procurement?      @relation(fields: [procurementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sale          Sale?             @relation(fields: [saleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("cash_flow")
}

model Customer {
  id          Int       @id @default(autoincrement())
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  createdById Int
  updatedById Int
  deletedById Int?
  name        String
  gender      Gender?   @default(NOT_DEFINED)
  phoneNumber String? // @unique()
  email       String? // @unique()
  description String?
  address     String?
  createdBy   User      @relation(name: "customer_createdBy_user", map: "customer_createdBy_user_fk", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  updatedBy   User      @relation(name: "customer_updatedBy_user", map: "customer_updatedBy_user_fk", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  deletedBy   User?     @relation(name: "customer_deletedBy_user", map: "customer_deletedBy_user_fk", fields: [deletedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  sales       Sale[]    @relation()

  @@map("customer")
}

model Expense {
  id                Int             @id @default(autoincrement())
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  createdById       Int
  updatedById       Int
  deletedById       Int?
  deletedAt         DateTime?
  name              String
  description       String?
  amount            Float
  expenseCategoryId Int
  expenseCategory   ExpenseCategory @relation(fields: [expenseCategoryId], references: [id], onUpdate: Cascade, onDelete: NoAction)
  createdBy         User            @relation(name: "expense_createdBy_user", map: "expense_createdBy_user_fk", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  updatedBy         User            @relation(name: "expense_updatedBy_user", map: "expense_updatedBy_user_fk", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  deletedBy         User?           @relation(name: "expense_deletedBy_user", map: "expense_deletedBy_user_fk", fields: [deletedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  cashFlow          CashFlow[]      @relation()

  @@map("expense")
}

enum CashFlowOperation {
  CREDIT
  DEBIT
}

model ExpenseCategory {
  id          Int               @id @default(autoincrement())
  createdById Int
  updatedById Int
  deletedById Int?
  isActive    Boolean           @default(true)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now()) @updatedAt
  deletedAt   DateTime?
  name        String // // @unique()
  description String?
  operation   CashFlowOperation @default(DEBIT)
  account     String
  expenses    Expense[]         @relation()
  createdBy   User              @relation(name: "expenseCategory_createdBy_user", map: "expenseCategory_createdBy_user_fk", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  updatedBy   User              @relation(name: "expenseCategory_updatedBy_user", map: "expenseCategory_updatedBy_user_fk", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  deletedBy   User?             @relation(name: "expenseCategory_deletedBy_user", map: "expenseCategory_deletedBy_user_fk", fields: [deletedById], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@map("expense_type")
}

model Notification {
  id          String    @id @default(uuid())
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  userId      Int
  name        String
  description String?
  url         String    @default("#")
  source      String    @default("system")
  dismissable Boolean   @default(true)
  user        User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("notification")
}

enum ProcurementDeliveryStatus {
  PENDING
  DELIVERED
}

enum ProcurementPaymentStatus {
  PAID
  UNPAID
}

model Procurement {
  id                  Int                       @id @default(autoincrement())
  isActive            Boolean                   @default(true)
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @default(now()) @updatedAt
  deletedAt           DateTime?
  createdById         Int
  updatedById         Int
  deletedById         Int?
  providerId          Int
  name                String
  description         String?
  invoiceNumber       String?
  invoiceDate         DateTime?
  deliveryStatus      ProcurementDeliveryStatus
  deliveredAt         DateTime?
  paymentStatus       ProcurementPaymentStatus
  payedAt             DateTime?
  createdBy           User                      @relation(name: "procurement_createdBy_user", map: "procurement_createdBy_user_fk", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  updatedBy           User                      @relation(name: "procurement_updatedBy_user", map: "procurement_updatedBy_user_fk", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  deletedBy           User?                     @relation(name: "procurement_deletedBy_user", map: "procurement_deletedBy_user_fk", fields: [deletedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  provider            Provider                  @relation(fields: [providerId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  procurementProducts ProcurementProduct[]      @relation()
  cashFlow            CashFlow[]

  @@map("procurement")
}

model ProcurementProduct {
  id            Int         @id @default(autoincrement())
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  deletedAt     DateTime?
  createdById   Int
  updatedById   Int
  deletedById   Int?
  procurementId Int
  productUnitId Int
  price         Float
  quantity      Int
  procurement   Procurement @relation(fields: [procurementId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productUnit   ProductUnit @relation(fields: [productUnitId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdBy     User        @relation(name: "procurementProduct_createdBy_user", fields: [createdById], references: [id])
  updatedBy     User        @relation(name: "procurementProduct_updatedBy_user", fields: [updatedById], references: [id])
  deletedBy     User?       @relation(name: "procurementProduct_deletedBy_user", fields: [deletedById], references: [id])

  @@map("procurement_product")
}

enum BarcodeType {
  EAN_8
  EAN_13
  CODABAR
  CODE_128
  CODE_39
  CODE_11
  UPC_A
  UPC_C
}

model Product {
  id           Int           @id @default(autoincrement())
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  deletedAt    DateTime?
  createdById  Int
  updatedById  Int
  deletedById  Int?
  categoryId   Int
  name         String
  description  String?
  barcode      String?
  barcodeType  BarcodeType?
  createdBy    User          @relation(name: "product_createdBy_user", map: "product_createdBy_user_fk", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  updatedBy    User          @relation(name: "product_updatedBy_user", map: "product_updatedBy_user_fk", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  deletedBy    User?         @relation(name: "product_deletedBy_user", map: "product_deletedBy_user_fk", fields: [deletedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  category     Category      @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  productUnits ProductUnit[] @relation()

  @@map("product")
}

model ProductUnit {
  id                  Int                  @id @default(autoincrement())
  isActive            Boolean              @default(true)
  createdById         Int
  updatedById         Int
  deletedById         Int?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @default(now()) @updatedAt
  deletedAt           DateTime?
  productId           Int
  unitId              Int
  wholesalePrice      Float
  sellingPrice        Float
  stockAlertEnabled   Boolean?             @default(false)
  lowQuantity         Int?                 @default(0)
  createdBy           User                 @relation(name: "productUnit_createdBy_user", map: "productUnit_createdBy_user_fk", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  updatedBy           User                 @relation(name: "productUnit_updatedBy_user", map: "productUnit_updatedBy_user_fk", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  deletedBy           User?                @relation(name: "productUnit_deletedBy_user", map: "productUnit_deletedBy_user_fk", fields: [deletedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  product             Product              @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  unit                Unit                 @relation(fields: [unitId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  procurementProducts ProcurementProduct[] @relation()
  saledProducts       SaleProduct[]        @relation()

  @@unique([productId, unitId])
  @@map("product_unit")
}

model Provider {
  id           Int           @id @default(autoincrement())
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  deletedAt    DateTime?
  createdById  Int
  updatedById  Int
  deletedById  Int?
  name         String
  description  String?
  address      String
  phoneNumber  String // @unique()
  email        String // @unique()
  procurements Procurement[] @relation()
  createdBy    User          @relation(name: "provider_createdBy_user", map: "provider_createdBy_user_fk", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  updatedBy    User          @relation(name: "provider_updatedBy_user", map: "provider_updatedBy_user_fk", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  deletedBy    User?         @relation(name: "provider_deletedBy_user", map: "provider_deletedBy_user_fk", fields: [deletedById], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@map("provider")
}

model Sale {
  id              Int           @id @default(autoincrement())
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  deletedAt       DateTime?
  createdById     Int
  updatedById     Int
  deletedById     Int?
  customerId      Int?
  name            String?
  description     String?
  note            String?
  isNoteVisible   Boolean       @default(false)
  discountOnTotal Float
  taxOnTotal      Float
  billAmount      Float         @default(0)
  netAmount       Float
  saleProducts    SaleProduct[] @relation()
  customer        Customer?     @relation(fields: [customerId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  createdBy       User          @relation(name: "sale_createdBy_user", map: "sale_createdBy_user_fk", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  updatedBy       User          @relation(name: "sale_updatedBy_user", map: "sale_updatedBy_user_fk", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  deletedBy       User?         @relation(name: "sale_deletedBy_user", map: "sale_deletedBy_user_fk", fields: [deletedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  cashFlow        CashFlow[]    @relation()

  @@map("sale")
}

model SaleProduct {
  id            Int         @id @default(autoincrement())
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  deletedAt     DateTime?
  createdById   Int
  updatedById   Int
  deletedById   Int?
  saleId        Int
  productUnitId Int
  quantity      Int
  costPrice     Float
  sellingPrice  Float
  discount      Float
  tax           Float
  sale          Sale        @relation(fields: [saleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productUnit   ProductUnit @relation(fields: [productUnitId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  createdBy     User        @relation(name: "saleProduct_createdBy_user", map: "saleProduct_createdBy_user_fk", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  updatedBy     User        @relation(name: "saleProduct_updatedBy_user", map: "saleProduct_updatedBy_user_fk", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  deletedBy     User?       @relation(name: "saleProduct_deletedBy_user", map: "saleProduct_deletedBy_user_fk", fields: [deletedById], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@map("sale_product")
}

model RefreshToken {
  id        String    @id @default(uuid())
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
  userId    Int
  expiredAt DateTime
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@map("refresh_token")
}

model Unit {
  id           Int           @id @default(autoincrement())
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  deletedAt    DateTime?
  createdById  Int
  updatedById  Int
  deletedById  Int?
  name         String // @unique()
  description  String?
  amount       Int
  createdBy    User          @relation(name: "unit_createdBy_user", map: "unit_createdBy_user_fk", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  updatedBy    User          @relation(name: "unit_updatedBy_user", map: "unit_updatedBy_user_fk", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  deletedBy    User?         @relation(name: "unit_deletedBy_user", map: "unit_deletedBy_user_fk", fields: [deletedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  productUnits ProductUnit[] @relation()

  @@map("unit")
}

model User {
  id                         Int                  @id @default(autoincrement())
  isActive                   Boolean              @default(true)
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @default(now()) @updatedAt
  deletedAt                  DateTime?
  createdById                Int?
  updatedById                Int?
  deletedById                Int?
  name                       String
  password                   String
  email                      String
  phoneNumber                String
  blockReason                String?
  notifications              Notification[]       @relation()
  refreshTokens              RefreshToken[]       @relation()
  createdBy                  User?                @relation(name: "user_createdBy_user", map: "user_createdBy_user_fk", fields: [createdById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  updatedBy                  User?                @relation(name: "user_updatedBy_user", map: "user_updatedBy_user_fk", fields: [updatedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  deletedBy                  User?                @relation(name: "user_deletedBy_user", map: "user_deletedBy_user_fk", fields: [deletedById], references: [id], onDelete: NoAction, onUpdate: Cascade)
  createdUsers               User[]               @relation(name: "user_createdBy_user")
  updatedUsers               User[]               @relation(name: "user_updatedBy_user")
  deletedUsers               User[]               @relation(name: "user_deletedBy_user")
  createdCustomers           Customer[]           @relation(name: "customer_createdBy_user")
  updatedCustomers           Customer[]           @relation(name: "customer_updatedBy_user")
  deletedCustomers           Customer[]           @relation(name: "customer_deletedBy_user")
  createdExpenses            Expense[]            @relation(name: "expense_createdBy_user")
  updatedExpenses            Expense[]            @relation(name: "expense_updatedBy_user")
  deletedExpenses            Expense[]            @relation(name: "expense_deletedBy_user")
  createdExpenseCategories   ExpenseCategory[]    @relation(name: "expenseCategory_createdBy_user")
  updatedExpenseCategories   ExpenseCategory[]    @relation(name: "expenseCategory_updatedBy_user")
  deletedExpenseCategories   ExpenseCategory[]    @relation(name: "expenseCategory_deletedBy_user")
  createdProcurements        Procurement[]        @relation(name: "procurement_createdBy_user")
  updatedProcurements        Procurement[]        @relation(name: "procurement_updatedBy_user")
  deletedProcurements        Procurement[]        @relation(name: "procurement_deletedBy_user")
  createdProcurementProducts ProcurementProduct[] @relation(name: "procurementProduct_createdBy_user")
  updatedProcurementProducts ProcurementProduct[] @relation(name: "procurementProduct_updatedBy_user")
  deletedProcurementProducts ProcurementProduct[] @relation(name: "procurementProduct_deletedBy_user")
  createdProducts            Product[]            @relation(name: "product_createdBy_user")
  updatedProducts            Product[]            @relation(name: "product_updatedBy_user")
  deletedProducts            Product[]            @relation(name: "product_deletedBy_user")
  createdCategories          Category[]           @relation(name: "category_createdBy_user")
  updatedCategories          Category[]           @relation(name: "category_updatedBy_user")
  deletedCategories          Category[]           @relation(name: "category_deletedBy_user")
  createdProductUnits        ProductUnit[]        @relation(name: "productUnit_createdBy_user")
  updatedProductUnits        ProductUnit[]        @relation(name: "productUnit_updatedBy_user")
  deletedProductUnits        ProductUnit[]        @relation(name: "productUnit_deletedBy_user")
  createdSales               Sale[]               @relation(name: "sale_createdBy_user")
  updatedSales               Sale[]               @relation(name: "sale_updatedBy_user")
  deletedSales               Sale[]               @relation(name: "sale_deletedBy_user")
  createdSaleProducts        SaleProduct[]        @relation(name: "saleProduct_createdBy_user")
  updatedSaleProducts        SaleProduct[]        @relation(name: "saleProduct_updatedBy_user")
  deletedSaleProducts        SaleProduct[]        @relation(name: "saleProduct_deletedBy_user")
  createdProviders           Provider[]           @relation(name: "provider_createdBy_user")
  updatedProviders           Provider[]           @relation(name: "provider_updatedBy_user")
  deletedProviders           Provider[]           @relation(name: "provider_deletedBy_user")
  createdUnits               Unit[]               @relation(name: "unit_createdBy_user")
  updatedUnits               Unit[]               @relation(name: "unit_updatedBy_user")
  deletedUnits               Unit[]               @relation(name: "unit_deletedBy_user")
  createdCashFlow            CashFlow[]           @relation(name: "cashFlow_createdBy_user")
  updatedCashFlow            CashFlow[]           @relation(name: "cashFlow_updatedBy_user")
  deletedCashFlow            CashFlow[]           @relation(name: "cashFlow_deletedBy_user")

  @@map("user")
}
